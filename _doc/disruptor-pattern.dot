digraph DistruptorPattern {
    graph [ overlap = false, splines = false, fontsize=12];
    node [fontsize = 9];
    edge [fontsize = 9];
    nodesep="0.5";
    ranksep = "0.45"
    {
        node [shape=plaintext];
        rank0 [label="", group=g0];
        rank1 [label="", group=g0];
        rank2 [label="", group=g0];
        rank3 [label="", group=g0];
        rank4 [label="", group=g0];
        rank5 [label="", group=g0];
        rank6 [label="", group=g0];
        Align1 [label="", group=g2];

        edge [style=invis];
        rank0 -> rank1 -> rank2 -> rank3 -> rank4 -> rank5 -> rank6;

        // Node ranking and grouping
        node [shape=record];
        {rank = same; rank1;
            EntryFactory [label = "{<r0> \<\<interface\>\>\nEntryFactory | <r1>}", group=g1];}
        {rank = same; rank2;
            Entry [label = "{<r0> \<\<interface\>\>\nEntry | <r1>}", group=g1];
            RingBuffer [label = "{<r0> RingBuffer | <r1> | <r2> }", group=g2];
            ConsumerBarrier [label = "{<r0> \<\<interface\>\>\nConsumerBarrier | <r1>}",
                group=g5];
            Consumer [label = "{<r0> \<\<interface\>\>\nConsumer | <r1>}", group=g6];}
        {rank = same; rank3;
            ClaimStrategy [label = "{<r0> \<\<interface\>\>\nClaimStrategy | <r1>}", group=g1];
            Align1;
            WaitStrategy [label = "{<r0> \<\<interface\>\>\nWaitStrategy | <r1>}", group=g4];}
        {rank = same; rank0;
            ProducerBarrier [label = "{<r0> \<\<interface\>\>\nProducerBarrier | <r1>}",
                group=g5];}
        {rank = same; rank4;
            ClaimStrategyIntermediateNode [shape=point,width=0.01,height=0.01, group=g4];
            WaitStrategyIntermediateNode [shape=point,width=0.01,height=0.01, group=g4];
            SingleThreadedClaimStrategy
                [label = "{<r0> SingleThreadedClaimStrategy | <r1> | <r2>}", group=g2];
            BusySpinWaitStrategy [label = "{<r0> BusySpinWaitStrategy | <r1> | <r2>}", group=g5];}
        {rank = same; rank5;
        MultiThreadedClaimStrategy [label = "{<r0> MultiThreadedClaimStrategy | <r1> | <r2>}",
            group=g2];
        YieldingWaitStrategy [label = "{<r0> YieldingWaitStrategy | <r1> | <r2>}", group=g5];}
        {rank = same; rank6;
            BlockingWaitStrategy [label = "{<r0> BlockingWaitStrategy | <r1> | <r2>}", group=g5];}
    }

    // Edge definitions
    edge [style=invis];  // These invisible edges are for vertical alignment
    EntryFactory -> Entry -> ClaimStrategy -> ClaimStrategyIntermediateNode;
    SingleThreadedClaimStrategy -> MultiThreadedClaimStrategy;
    WaitStrategy -> WaitStrategyIntermediateNode;
    ProducerBarrier -> ConsumerBarrier -> BusySpinWaitStrategy ->
        YieldingWaitStrategy -> BlockingWaitStrategy;
    Align1 -> SingleThreadedClaimStrategy -> MultiThreadedClaimStrategy;

    edge [style = solid, arrowhead = vee, weight=0];
    RingBuffer -> EntryFactory[style=dotted, label=fill, tailport=<r0>, headport=<r0>,
        taillabel=1];
    RingBuffer -> Entry[headlabel="1..*", dir=both, arrowtail=diamond];
    Consumer -> ConsumerBarrier [style = dotted, label = waitFor, weight=1];
    ConsumerBarrier -> RingBuffer [ label = waitFor, headlabel = 1];
    ConsumerBarrier -> Consumer [label = "track sequence", taillabel = "0..*", headlabel = "0..*", weight=1];
    RingBuffer -> ClaimStrategy [taillabel = "1", headlabel = "1", dir = both, arrowtail = "diamond"];
    RingBuffer -> WaitStrategy [taillabel = "1", headlabel = "1", dir = both, arrowtail = diamond];
    ProducerBarrier -> RingBuffer;
    ProducerBarrier -> Consumer;

    edge [samehead=h1];
    WaitStrategyIntermediateNode -> WaitStrategy [arrowhead=onormal, tailport=n];
    ClaimStrategyIntermediateNode -> ClaimStrategy [arrowhead=onormal, tailport=n];
    {BusySpinWaitStrategy, YieldingWaitStrategy, BlockingWaitStrategy}
        -> WaitStrategyIntermediateNode [dir = none, headport=e, tailport=w];
    {SingleThreadedClaimStrategy, MultiThreadedClaimStrategy}
        -> ClaimStrategyIntermediateNode [dir = none, tailport=e];
}
